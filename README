Inspired by this /r/dailyprogrammer post:
https://www.reddit.com/r/dailyprogrammer/comments/5c5jx9/20161109_challenge_291_intermediate_reverse/

I've gone a little beyond the requirements and am creating a full parse tree from the input.
The output is the parse tree rendered as an S-expression, then "=" and the final value.

Requires: 
node packages 'enum', 'buffered-reader'

Structure:
parse.js holds the machinery
rpn.js holds the States/transition functions, the start state, the end state
trees.js holds some helper functions
main.js runs everything

run with`node rpn.js`

add your own tests/ RPN expressions to rpn_tests

Run with:
"""
node main.js ./rpn.js rpn_tests
"""

or, for easier reading:
"""
node main.js ./rpn.js rpn_tests | less -S
"""
